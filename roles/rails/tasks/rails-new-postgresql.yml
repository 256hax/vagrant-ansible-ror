---
#--- Init ---#
- name: Is Sample Rails with PostgreSQL directory exist?
  stat:
    path: "{{ sample_rails_postgresql_path }}"
  register: is_sample_rails_postgresql

#--- Drop Table if exist ---#
- name: Delete migration directory if exist
  file:
    path: "{{ sample_rails_postgresql_migration_path }}"
    state: absent
  when: is_sample_rails_postgresql.stat.exists
  ignore_errors: yes

- name: Create migration directory
  file:
    path: "{{ sample_rails_postgresql_migration_path }}"
    state: directory
  when: is_sample_rails_postgresql.stat.exists
  ignore_errors: yes

- name: Kill spring process and generate migration file
  command: "{{ item }}"
  loop:
    # It need pkill spring sometimes.
    - pkill -f spring
    - bundle exec rails g migration drop_users
  args:
    chdir: "{{ sample_rails_postgresql_path }}"
  when: is_sample_rails_postgresql.stat.exists
  ignore_errors: yes

- name: Find migration file
  find:
    paths: "{{ sample_rails_postgresql_migration_path }}"
    patterns: '.*drop_users.*'
    use_regex: yes
  register: migration_file
  when: is_sample_rails_postgresql.stat.exists
  ignore_errors: yes

- name: Insert drop_table
  # same as => command: sed -ie "3i drop_table :users" {{ migration_file.files[0].path }}
  lineinfile:
    path: "{{ migration_file.files[0].path }}"
    insertafter: '.*def change'
    line: '    drop_table :users'
  when: is_sample_rails_postgresql.stat.exists
  ignore_errors: yes

- name: Migration DB
  command: "bundle exec rails db:migrate"
  args:
    chdir: "{{ sample_rails_postgresql_path }}"
  when: is_sample_rails_postgresql.stat.exists
  ignore_errors: yes
  #--- /Drop Table if exist ---#

- name: Delete sample directory all if exist
  file:
    path: "{{ sample_rails_postgresql_path }}"
    state: absent
  when: is_sample_rails_postgresql.stat.exists
  ignore_errors: yes

#--- Rails new ---#
- name: Create Sample Rails with PostgreSQL directory
  file:
    path: "{{ sample_rails_postgresql_path }}"
    state: directory

- name: Copy Gemfile
  copy:
    src: "../files/Gemfile"
    dest: "{{ sample_rails_postgresql_path }}"

- name: Install RubyGems
  bundler:
      state: present
  args:
    chdir: "{{ sample_rails_postgresql_path }}"

- name: Rails new
  expect:
    command: "bundle exec rails new . -d postgresql"
    responses:
      (.*)Overwrite (.*)Gemfile(.*): "Y"
    # timeout 1200 sec = 20 min
    timeout: 1200
  args:
    chdir: "{{ sample_rails_postgresql_path }}"

#--- Install Gems ---#
- name: Add pgsql bin PATH
  # Fix for "checking for pg_config... no" error.
  shell: |
    echo -e "\n" >> ~/.bashrc
    echo "export PATH=/usr/pgsql-{{ postgresql_major_version }}/bin:\$PATH" >> ~/.bashrc
    source ~/.bashrc

- name: Bundle Install
  command: "bundle install"
  args:
    chdir: "{{ sample_rails_postgresql_path }}"

- name: Rails scaffold
  command: "bundle exec rails g scaffold user name:string age:integer"
  args:
    chdir: "{{ sample_rails_postgresql_path }}"

- name: Copy database.yml
  copy:
    src: "../files/database.yml"
    dest: "{{ sample_rails_postgresql_path }}/config"

- name: Rails DB create
  command: "bundle exec rails db:create"
  args:
    chdir: "{{ sample_rails_postgresql_path }}"

- name: Rails DB migrate
  command: "bundle exec rails db:migrate"
  args:
    chdir: "{{ sample_rails_postgresql_path }}"
  ignore_errors: yes
